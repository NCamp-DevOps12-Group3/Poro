<?xml version="1.0" encoding="UTF-8"?>
<!--필요한 엘리먼트들을 사용하기 위한 namesapce 추가하는 부분
xmlns:키워드 => 키워드로 엘리먼트를 생성한다.
xsi:schemaLocation에서 namespace를 사용하기 위한 설정파일인 xsd파일을 링크를 걸어줘야 namespace를 사용할 수 있는 상태가 된다.-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.bit.devops12.poro"/>

    <!--외부 파일 참조-->
    <context:property-placeholder location="classpath:/config/db.properties"/>

    <!--라이브러리(jar 파일)의 클래스에는 어노테이션을 달 수 없기때문에 bean 엘리먼트를 통해서
        bean 객체를 생성하고 등록한다.-->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- mybatis에서 DB Connection Pool로 관리하는 SessiontFactory 객체 bean 등록-->
    <bean id="sessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:sql-map-config.xml"/>
    </bean>

    <!-- mybatis의 DB Connection Pool인 SessionFactory에서 DB Connection을 하나 씩
         꺼내서 사용할 SessionTemplate 객체 bean 등록-->
    <bean class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sessionFactory"/>
    </bean>

    <!--Transaction 설정-->
    <!--Tansaction을 관리하는 객체를 bean으로 등록-->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--DML(insert, update, delete)가 종료되면 commit이나 rollback이 자동 실행되도록 설정
        TransactionManager만 등록한다고 Transaction이 자동 관리되진 않고
        AOP 설정을 통해서 Transaction이 공통 기능으로 동작되도록 설정해야 된다.
    -->
    <!-- Transcation은 advice를 tx:advice 엘리먼트로 등록한다-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!--어떤 이름의 메소드에서 Transaction이 동작할 지 설정-->
        <tx:attributes>
            <!--get으로 시작하는 메소드에서는 Transaction 동작하지 않음-->
            <tx:method name="get*" read-only="true"/>
            <!--get으로 시작하는 메소드를 제외한 모든 메소드에서는 Transaction 동작-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--AOP 설정을 통한 어드바이스와 포인트컷 메소드 위빙-->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.bit.devops12.poro.service..*Impl.*(..))"/>
        <!--어떤 메소드를 공통 기능으로 사용할 지 알수 있을 때는 aop:aspect를 사용하지만
            commit, rollback이 언제 동작할 시점을 개발자가 지정할 수 없기 때문에 어떤 메소드를 공통 기능으로
            사용할 지 알 수 없으므로 aop:advisor를 사용한다.
        -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
</beans>